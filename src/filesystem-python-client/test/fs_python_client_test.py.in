import unittest
import pickle

# Given that StorageRouterClient is/should only a thin boilerplate wrapper around
# PythonClient, we keep testing at the StorageRouterClient level to a bare minimum.
# General python-client tests should be written directly in c++ against
# PythonClient

# importing the module is already a test in itself
from volumedriver.storagerouter.storagerouterclient import \
    ArakoonNodeConfig \
    , ClusterContact \
    , ClusterNodeConfig \
    , ClusterNodeState \
    , ClusterNotReachableException \
    , DTLConfig \
    , DTLMode \
    , FileExistsException \
    , InsufficientResourcesException \
    , InvalidOperationException \
    , LocalStorageRouterClient \
    , MaxRedirectsExceededException \
    , ObjectNotFoundException \
    , PythonTestHelpers \
    , Severity \
    , SnapshotInfo \
    , SnapshotNotFoundException \
    , Statistics \
    , StorageRouterClient\
    , VolumeInfo \
    , VolumeRestartInProgressException


class PicklingPythonClientTest(unittest.TestCase):

    def test_VolumeInfoPickling(self):
        volume_info = VolumeInfo()
        dump = pickle.dumps(volume_info)
        volume_info2 = pickle.loads(dump)
        self.assertEqual(volume_info, volume_info2)

    def test_StatisticsPickling(self):
        statistics = Statistics()
        dump = pickle.dumps(statistics)
        statistics2 = pickle.loads(dump)
        self.assertEqual(statistics, statistics2)

    def test_SnapshotInfoPickling(self):
        snapshot_info = SnapshotInfo()
        dump = pickle.dumps(snapshot_info)
        snapshot_info2 = pickle.loads(dump)
        self.assertEqual(snapshot_info, snapshot_info2)


class FilesystemPythonClientTest(unittest.TestCase):

    def test_basic(self):
        client = StorageRouterClient("some_clusterid",
                                     [ClusterContact("some_ip", 1111),
                                      ClusterContact("some_other_ip", 2222)])

        self.assertRaises(ClusterNotReachableException, client.list_volumes)


class TestHelperTest(unittest.TestCase):

    def check_exception_type(self, test_code, exceptionclass):
        self.assert_(issubclass(exceptionclass, Exception))
        self.assertRaises(
            exceptionclass, PythonTestHelpers.generate_exceptions, test_code)
        # this one should be superfluous given the previous two
        self.assertRaises(
            Exception, PythonTestHelpers.generate_exceptions, test_code)

    def test_exceptions(self):
        PythonTestHelpers.generate_exceptions(0)
        self.check_exception_type(1, MaxRedirectsExceededException)
        self.check_exception_type(2, ObjectNotFoundException)
        self.check_exception_type(3, InvalidOperationException)
        self.check_exception_type(4, SnapshotNotFoundException)
        self.check_exception_type(5, FileExistsException)
        self.check_exception_type(6, InsufficientResourcesException)
        self.check_exception_type(7, VolumeRestartInProgressException)

    def test_info_cluster(self):
        self.assertDictEqual({'A': ClusterNodeState.ONLINE,
                              'B': ClusterNodeState.OFFLINE},
                             PythonTestHelpers.generate_node_status_map())

    def test_update_configuration(self):
        updates = PythonTestHelpers.generate_update_report()
        self.assertEqual(2, len(updates))

        self.assertDictEqual({'param_name': 'updated_param_1',
                              'old_value': 'old_value_1',
                              'new_value': 'new_value_1'},
                             updates[0])

        self.assertDictEqual({'param_name': 'updated_param_2',
                              'old_value': 'old_value_2',
                              'new_value': 'new_value_2'},
                             updates[1])

    def test_arakoon_node_id(self):
        node_id = "SomeArakoonNode"
        self.assertEqual(
            node_id, PythonTestHelpers.reflect_arakoon_node_id(node_id))

    def test_arakoon_node_config(self):
        cfg = ArakoonNodeConfig("ArakoonNodeId",
                                "hostname",
                                1234)
        self.assertEqual(
            cfg, PythonTestHelpers.reflect_arakoon_node_config(cfg))

    def test_cluster_node_config(self):
        cfg = ClusterNodeConfig("ClusterNodeId",
                                "message_host",
                                123,
                                456,
                                789,
                                "rdma://edge_host:101",
                                "xmlrpc_host",
                                "dtl_host")
        self.assertEqual(
            cfg, PythonTestHelpers.reflect_cluster_node_config(cfg))

    def test_cluster_node_config_list(self):
        # getting a list is needed for the ClusterRegistry.get_node_configs
        cfg_list = [ClusterNodeConfig("ClusterNodeId%d" % i,
                                      "hostname%i" % i,
                                      10 * i + 1,
                                      10 * i + 2,
                                      10 * i + 3,
                                      "rdma://hostname%i:23456" % i) for i in range(5)]
        self.assertEqual(
            cfg_list, PythonTestHelpers.reflect_cluster_node_config_list(cfg_list))

    def test_strongly_typed_tcp_ports(self):
        self.assertRaises(
            Exception, PythonTestHelpers.arithmeticy_things, 65536, 1)
        self.assertEqual(3, PythonTestHelpers.arithmeticy_things(1, 2))

    def test_loglevels(self):
        for sev in Severity.values.values():
            self.assertEqual(sev, PythonTestHelpers.reflect_loglevel(sev))

    def test_logfilter(self):
        fltr = ("foo", Severity.info)
        self.assertEqual(fltr, PythonTestHelpers.reflect_logfilter(fltr))

    def test_logfilters(self):
        fltrs = [("bar", Severity.trace)]
        self.assertEqual(fltrs, PythonTestHelpers.reflect_logfilters(fltrs))

    def test_optional_volume_id(self):
        self.assertEqual(None, PythonTestHelpers.reflect_maybe_volume_id(None))
        vname = "volume"
        self.assertEqual(
            vname, PythonTestHelpers.reflect_maybe_volume_id(vname))

    def test_maybe_chrono_seconds(self):
        self.assertEqual(None, PythonTestHelpers.reflect_maybe_chrono_seconds(None))
        self.assertEqual(1234, PythonTestHelpers.reflect_maybe_chrono_seconds(1234))

    def test_dimensioned_value(self):
        self.assertEqual("1B", PythonTestHelpers.reflect_dimensioned_value("1B"))

    def test_uri(self):
        s = "tcp://127.0.0.1:1234"
        self.assertEqual(s, PythonTestHelpers.reflect_uri(s))

    def test_maybe_node_distance_map(self):
        d = {}
        self.assertEqual(d, PythonTestHelpers.reflect_maybe_node_distance_map(d))
        d["node_1"] = 1
        d["node_2"] = 1
        d["node_3"] = 2
        self.assertEqual(d, PythonTestHelpers.reflect_maybe_node_distance_map(d))

    def test_cluster_node_config(self):
        node_id = "node_X"
        host = "192.168.1.1"
        port = 1234
        dtl_port = port + 1
        msg_port = port + 2
        xml_port = port + 3
        net_uri = "rdma://192.168.1.2:7890"

        cfg = ClusterNodeConfig(vrouter_id = node_id,
                                host = host,
                                failovercache_port = dtl_port,
                                xmlrpc_port = xml_port,
                                message_port = msg_port,
                                network_server_uri = net_uri)

        self.assertEqual(node_id, cfg.vrouter_id)
        self.assertEqual(host, cfg.host)
        self.assertEqual(dtl_port, cfg.failovercache_port)
        self.assertEqual(msg_port, cfg.message_port)
        self.assertEqual(xml_port, cfg.xmlrpc_port)
        self.assertEqual(net_uri, cfg.network_server_uri)

    def test_failovercache_config(self):
        h = "127.0.0.1"
        m = DTLMode.SYNCHRONOUS
        p = 12345
        cfg = DTLConfig(mode = m,
                        host = h,
                        port = p)
        self.assertEqual(h, cfg.host)
        self.assertEqual(m, cfg.mode)
        self.assertEqual(p, cfg.port)

        def test_cluster_contact(self):
            h = "127.0.0.1"
            p = 12345
            c = ClusterContact(port = p,
                               host = h)
            self.assertEqual(h, c.host)
            self.assertEqual(p, c.port)
